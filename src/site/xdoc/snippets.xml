<?xml version="1.0" encoding="UTF-8"?>
<document>

   <properties>
      <title>Json-lib::Snippets</title>
   </properties>

   <body>
      <section name="Snippets">
	 <a name="JavaJSON"/>
         <subsection name="From Java to JSON">
            <ol>
               <li><a href="#Creating a JSONObject from scratch">Creating a JSONObject from scratch</a></li>
               <li><a href="#Creating a JSONObject from a JSON formatted string">Creating a JSONObject from a JSON formatted string</a></li>
               <li><a href="#Creating a JSONObject from a Map">Creating a JSONObject from a Map</a></li>
               <li><a href="#Creating a JSONObject from a JavaBean">Creating a JSONObject from a JavaBean</a></li>
               <li><a href="#Creating a JSONArray from scratch">Creating a JSONArray from scratch</a></li>
               <li><a href="#Creating a JSONArray from a JSON formatted string">Creating a JSONArray from a JSON formatted string</a></li>
               <li><a href="#Creating a JSONArray from a Collection">Creating a JSONArray from a Collection</a></li>
               <li><a href="#Creating a JSONArray from an array">Creating a JSONArray from an array</a></li>
               <li><a href="#Exclude properties">Exclude properties</a></li>
               <li><a href="#Exclude properties (with filters)">Exclude properties (with filters)</a></li>
            </ol>
         </subsection>
	 <a name="JSONJava"/>
         <subsection name="From JSON to Java">
            <ol>
               <li><a href="#JSONObject to DynaBean">JSONObject to DynaBean</a></li>
               <li><a href="#JSONObject to JavaBean">JSONObject to JavaBean</a></li>
               <li><a href="#JSONArray to List">JSONArray to List</a></li>
               <li><a href="#JSONArray to array">JSONArray to array</a></li>
               <li><a href="#JSONArray to array (type conversion)">JSONArray to array (type conversion)</a></li>
               <li><a href="#JSONObject to JavaBean, exclude properties with filters">JSONObject to JavaBean, exclude properties with filters</a></li>
            </ol>
         </subsection>
      </section>
      <section name="From Java to JSON">
         <subsection name="Creating a JSONObject from scratch">
<textarea cols="80" rows="9" class="java:nocontrols:nogutter" name="srccode">
JSONObject jsonObject = new JSONObject()
                              .element( "string", "JSON" )
                              .element( "integer", "1" )
                              .element( "double", "2.0" )
                              .element( "boolean", "true" );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertEquals( 2.0d, jsonObject.getDouble("double"), 0d );      
assertTrue( jsonObject.getBoolean("boolean") );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONObject from a JSON formatted string">
<textarea cols="80" rows="6" class="java:nocontrols:nogutter" name="srccode">
String str = "{'string':'JSON', 'integer': 1, 'double': 2.0, 'boolean': true}";
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( str );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertEquals( 2.0d, jsonObject.getDouble("double"), 0d );      
assertTrue( jsonObject.getBoolean("boolean") );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONObject from a Map">
<textarea cols="80" rows="10" class="java:nocontrols:nogutter" name="srccode">
Map map = new HashMap();
map.put( "string", "JSON" );
map.put( "integer", "1" );
map.put( "double", "2.0" );
map.put( "boolean", "true" );
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( map );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertEquals( 2.0d, jsonObject.getDouble("double"), 0d );      
assertTrue( jsonObject.getBoolean("boolean") );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONObject from a JavaBean">
<textarea cols="80" rows="20" class="java:nocontrols:nogutter" name="srccode">
public class MyJavaBean {
   private String string;
   private int integer;
   private double dooble;
   private boolean bool;

   // getters &amp; setters
}

MyJavaBean bean = new MyJavaBean();
bean.setString( "JSON" );
bean.setInteger( 1 );
bean.setDooble( 2.0d );
bean.setBool( true );
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( bean );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertEquals( 2.0d, jsonObject.getDouble("dooble"), 0d );      
assertTrue( jsonObject.getBoolean("bool") );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONArray from scratch">
<textarea cols="80" rows="9" class="java:nocontrols:nogutter" name="srccode">
JSONArray jsonArray = new JSONArray()
                              .element( "JSON" )
                              .element( "1" )
                              .element( "2.0" )
                              .element( "true" );
assertEquals( "JSON", jsonArray.getString(0) );      
assertEquals( 1, jsonArray.getInt(1) );      
assertEquals( 2.0d, jsonArray.getDouble(2), 0d );      
assertTrue( jsonArray.getBoolean(3) );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONArray from a JSON formatted string">
<textarea cols="80" rows="6" class="java:nocontrols:nogutter" name="srccode">
String str = "['JSON', 1, 2.0, true]";
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( str );
assertEquals( "JSON", jsonArray.getString(0) );      
assertEquals( 1, jsonArray.getInt(1) );      
assertEquals( 2.0d, jsonArray.getDouble(2), 0d );      
assertTrue( jsonArray.getBoolean(3) );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONArray from a Collection">
<textarea cols="80" rows="9" class="java:nocontrols:nogutter" name="srccode">
List list = new ArrayList();
list.add( "JSON" );
list.add( "1" );
list.add( "2.0" );
list.add( "true" );
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( list );
assertEquals( "JSON", jsonArray.getString(0) );      
assertEquals( 1, jsonArray.getInt(1) );      
assertEquals( 2.0d, jsonArray.getDouble(2), 0d );      
assertTrue( jsonArray.getBoolean(3) );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Creating a JSONArray from an array">
<textarea cols="80" rows="6" class="java:nocontrols:nogutter" name="srccode">
Object[] array = new Object[]{ "JSON", "1", "2.0", "true" };
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( array );
assertEquals( "JSON", jsonArray.getString(0) );      
assertEquals( 1, jsonArray.getInt(1) );      
assertEquals( 2.0d, jsonArray.getDouble(2), 0d );      
assertTrue( jsonArray.getBoolean(3) );      
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Exclude properties">
<textarea cols="80" rows="8" class="java:nocontrols:nogutter" name="srccode">
String str = "{'string':'JSON', 'integer': 1, 'double': 2.0, 'boolean': true}";
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setExcludes( new String[]{ "double", "boolean" } );
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( str, jsonConfig );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertFalse( jsonObject.has("double") );   
assertFalse( jsonObject.has("boolean") );   
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
         <subsection name="Exclude properties (with filters)">
<textarea cols="80" rows="15" class="java:nocontrols:nogutter" name="srccode">
String str = "{'string':'JSON', 'integer': 1, 'double': 2.0, 'boolean': true}";
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setJsonPropertyFilter( new PropertyFilter(){  
   public boolean apply( Object source, String name, Object value ) {  
      if( "double".equals(value) || "boolean".equals(value) ){  
         return true;  
      }  
      return false;  
   }  
});  
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( str, jsonConfig );
assertEquals( "JSON", jsonObject.getString("string") );      
assertEquals( 1, jsonObject.getInt("integer") );      
assertFalse( jsonObject.has("double") );   
assertFalse( jsonObject.has("boolean") );   
</textarea>[<a href="#Snippets">Index</a>|<a href="#JavaJSON">From Java to JSON</a>]
         </subsection>
      </section>
      <section name="From JSON to Java">
         <subsection name="JSONObject to DynaBean">
<textarea cols="80" rows="7" class="java:nocontrols:nogutter" name="srccode">
String str = "{'string':'JSON', 'integer': 1, 'double': 2.0, 'boolean': true}";
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( str );
DynaBean bean = (DynaBean) JSONSerializer.toJava( jsonObject );
assertEquals( "JSON", bean.get("string") );      
assertEquals( new Integer(1), bean.get("integer") );      
assertEquals( new Double(2.0), bean.get("double") );      
assertEquals( Boolean.TRUE, bean.get("boolean") );   
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
         <subsection name="JSONObject to JavaBean">
<textarea cols="80" rows="25" class="java:nocontrols:nogutter" name="srccode">
public class MyJavaBean {
   private String string;
   private int integer;
   private double dooble;
   private boolean bool;

   // getters &amp; setters
}

MyJavaBean bean = new MyJavaBean();
bean.setString( "JSON" );
bean.setInteger( 1 );
bean.setDooble( 2.0d );
bean.setBool( true );
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( bean );
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setRootClass( MyJavaBean.class );
MyJavaBean bean2 = (MyJavaBean) JSONSerializer.toJava( jsonObject, jsonConfig );
assertNotNull( bean2 );
assertEquals( "JSON", bean2.getString() );
assertEquals( 1, bean2.getInteger() );
assertEquals( 2.0d, bean2.getDooble(), 0d );
assertTrue( bean2.getBool() );
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
         <subsection name="JSONArray to List">
<textarea cols="80" rows="5" class="java:nocontrols:nogutter" name="srccode">
List input = new ArrayList();
input.add( "JSON" );
input.add( "1" );
input.add( "2.0" );
input.add( "true" );
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( input );
List output = (List) JSONSerializer.toJava( jsonArray );
ArrayAssertions.assertEquals( input, output );
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
         <subsection name="JSONArray to array">
<textarea cols="80" rows="5" class="java:nocontrols:nogutter" name="srccode">
List input = new ArrayList();
input.add( "JSON" );
input.add( "1" );
input.add( "2.0" );
input.add( "true" );
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( input );
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setArrayMode( JsonConfig.MODE_OBJECT_ARRAY );
Object[] output = (Object[]) JSONSerializer.toJava( jsonArray, jsonConfig );
Object[] expected = new Object[]{ "JSON", "1", "2.0", "true" };
ArrayAssertions.assertEquals( expected, output);
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
         <subsection name="JSONArray to array (type conversion)">
<textarea cols="80" rows="5" class="java:nocontrols:nogutter" name="srccode">
List input = new ArrayList();
input.add( "1" );
input.add( "2" );
input.add( "3.0" );
JSONArray jsonArray = (JSONArray) JSONSerializer.toJSON( input );
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setArrayMode( JsonConfig.MODE_OBJECT_ARRAY );
jsonConfig.setRootClass( Integer.TYPE );
int[] output = (int[]) JSONSerializer.toJava( jsonArray, jsonConfig );
int[] expected = new int[]{ 1, 2, 3 };
ArrayAssertions.assertEquals( expected, output);
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
         <subsection name="JSONObject to JavaBean, exclude properties with filters">
<textarea cols="80" rows="5" class="java:nocontrols:nogutter" name="srccode">
public class MyJavaBean {
   private String string;
   private int integer;
   private double dooble = 0d;
   private boolean bool;

   // getters &amp; setters
}

MyJavaBean bean = new MyJavaBean();
bean.setString( "JSON" );
bean.setInteger( 1 );
bean.setDooble( 2.0d );
bean.setBool( true );
JSONObject jsonObject = (JSONObject) JSONSerializer.toJSON( bean );
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setRootClass( MyJavaBean.class );
jsonConfig.setJavaPropertyFilter( new PropertyFilter(){  
   public boolean apply( Object source, String name, Object value ) {  
      if( "bool".equals( name ) || "dooble".equals( name ) ){  
         return true;  
      }  
      return false;  
   }  
}); 
MyJavaBean bean2 = (MyJavaBean) JSONSerializer.toJava( jsonObject, jsonConfig );
assertNotNull( bean2 );
assertEquals( "JSON", bean2.getString() );
assertEquals( 1, bean2.getInteger() );
assertEquals( 0d, bean2.getDooble(), 0d );
assertFalse( bean2.getBool() );
</textarea>[<a href="#Snippets">Index</a>|<a href="#JSONJava">From JSON to Java</a>]
         </subsection>
      </section>
   </body>
</document>
